service: setUpTopic

package:
  exclude:
    - node_modules/**

frameworkVersion: '2'

plugins:
  - serverless-jest-plugin

custom:
  allowHeaders:
    - Accept
    - Content-Type
    - Content-Length

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: prod
  memorySize: 128
  timeout: 5
  endpoint: regional
  environment:
    CITY_TABLE: city-table-${opt:stage, self:provider.stage}
    DLQ_ARN:
      Fn::GetAtt: [DeadLetterSQSQueue, Arn]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:CreateTopic
        - sns:Subscribe
      Resource: '*'
      Condition:
        StringLike:
          SNS:Endpoint: '*@example.com'
        StringEquals:
          sns:Protocol: email
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CITY_TABLE}'
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt: [DeadLetterSQSQueue, Arn]

functions:
  setupTopic:
    handler: handler.handler
    description: setup new topic if required and add subscriber to it
    events:
      - http:
          path: subscribe
          method: post
          cors:
            origin: '*'
            headers: '${self:custom.allowHeaders}'

resources:
  Resources:
    CityTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CITY_TABLE}
        AttributeDefinitions:
          - AttributeName: city
            AttributeType: S
        KeySchema:
          - AttributeName: city
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DeadLetterSQSQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: sqs-rainyDay-DLQ-${opt:stage, self:provider.stage}.fifo
        FifoQueue: true
